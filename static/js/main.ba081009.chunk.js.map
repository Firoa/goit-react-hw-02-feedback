{"version":3,"sources":["components/Statistics/Statistics.js","components/Button/Button.js","components/FeedbackOptions/FeedbackOptions.js","components/Section/Section.js","components/Notification/Notification.js","App.js","index.js","components/Button/Button.module.css"],"names":["Statistics","good","neutral","bad","total","positivePercentage","Button","callbackfunc","text","key","toLowerCase","onClick","className","styles","button","type","FeedbackOptions","options","onLeaveFeedback","map","option","Section","title","children","Notification","message","App","addFeedbackPoints","setState","prevState","countTotalFeedback","Object","values","state","PositiveFeedbackPercentage","goodpercent","Math","floor","feedbackOptions","this","Component","ReactDOM","render","document","getElementById","module","exports"],"mappings":"2NAuBeA,EApBI,SAAC,GAAuD,IAArDC,EAAoD,EAApDA,KAAMC,EAA8C,EAA9CA,QAASC,EAAqC,EAArCA,IAAKC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,mBAC/C,OACE,4BACE,sCAAYJ,GACZ,wCAAcC,EAAd,KACA,oCAAUC,GACV,sCAAYC,GACZ,oDAA0BC,EAA1B,O,gBCYSC,EAlBA,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,aAAcC,EAAW,EAAXA,KACxBC,EAAMD,EAAKE,cACjB,OACE,4BACEC,QAAS,kBAAMJ,EAAaE,IAC5BG,UAAWC,IAAOC,OAClBC,KAAK,UAEJP,ICOQQ,EAfS,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,gBAClC,OACE,6BACGD,EAAQE,KAAI,SAAAC,GAAM,OACjB,kBAAC,EAAD,CAAQX,IAAKW,EAAQb,aAAcW,EAAiBV,KAAMY,SCOnDC,EAZC,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,SAAV,OACd,iCACE,4BAAKD,GACJC,ICGUC,EANM,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OAAiB,4BAAKA,IC+D5BC,E,kDA3Db,aAAe,IAAD,8BACZ,gBASFC,kBAAoB,SAAAlB,GAClB,EAAKmB,UAAS,SAAAC,GACZ,OAAO,eAAGpB,EAAMoB,EAAUpB,GAAO,OAZvB,EAgBdqB,mBAAqB,WAInB,IAHA,IAEI1B,EAAQ,EACZ,MAHe2B,OAAOC,OAAO,EAAKC,OAGlC,eAA4B,CAC1B7B,GADc,KAGhB,OAAOA,GAvBK,EA0Bd8B,2BAA6B,WAG3B,IAFA,IACI9B,EAAQ,EACZ,MAFe2B,OAAOC,OAAO,EAAKC,OAElC,eAA4B,CAC1B7B,GADc,KAGhB,IAAM+B,EAAiC,IAAlB,EAAKF,MAAMhC,KAAcG,EAC9C,OAAOgC,KAAKC,MAAMF,IA/BlB,EAAKF,MAAQ,CACXhC,KAAM,EACNC,QAAS,EACTC,IAAK,GAEP,EAAKmC,gBAAkB,CAAC,OAAQ,UAAW,OAP/B,E,qDAqCZ,OACE,kBAAC,EAAD,CAAShB,MAAO,yBACd,kBAAC,EAAD,CACEL,QAASsB,KAAKD,gBACdpB,gBAAiBqB,KAAKZ,oBAEO,IAA9BY,KAAKT,qBACJ,kBAAC,EAAD,CAAcL,QAAQ,sBAEtB,kBAAC,EAAD,CACExB,KAAMsC,KAAKN,MAAMhC,KACjBC,QAASqC,KAAKN,MAAM/B,QACpBC,IAAKoC,KAAKN,MAAM9B,IAChBC,MAAOmC,KAAKT,qBACZzB,mBAAoBkC,KAAKL,oC,GApDnBM,aCFlBC,IAASC,OACP,kBAAC,EAAD,MAEAC,SAASC,eAAe,U,kBCN1BC,EAAOC,QAAU,CAAC,OAAS,yB","file":"static/js/main.ba081009.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) => {\r\n  return (\r\n    <ul>\r\n      <li> good: {good}</li>\r\n      <li>neutral: {neutral} </li>\r\n      <li>bad: {bad}</li>\r\n      <li>total: {total}</li>\r\n      <li> positivePercentage: {positivePercentage}%</li>\r\n    </ul>\r\n  );\r\n};\r\n\r\nStatistics.propTypes = {\r\n  good: PropTypes.number.isRequired,\r\n  neutral: PropTypes.number.isRequired,\r\n  bad: PropTypes.number.isRequired,\r\n  total: PropTypes.number.isRequired,\r\n  positivePercentage: PropTypes.number.isRequired,\r\n};\r\n\r\nexport default Statistics;\r\n","import React from 'react';\r\nimport styles from './Button.module.css';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Button = ({ callbackfunc, text }) => {\r\n  const key = text.toLowerCase();\r\n  return (\r\n    <button\r\n      onClick={() => callbackfunc(key)}\r\n      className={styles.button}\r\n      type=\"button\"\r\n    >\r\n      {text}\r\n    </button>\r\n  );\r\n};\r\n\r\nButton.propTypes = {\r\n  text: PropTypes.string.isRequired,\r\n  callbackfunc: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Button;\r\n","import React from 'react';\r\nimport Button from '../Button/Button';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => {\r\n  return (\r\n    <div>\r\n      {options.map(option => (\r\n        <Button key={option} callbackfunc={onLeaveFeedback} text={option} />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nFeedbackOptions.propTypes = {\r\n  options: PropTypes.arrayOf(PropTypes.string).isRequired,\r\n  onLeaveFeedback: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default FeedbackOptions;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Section = ({ title, children }) => (\r\n  <section>\r\n    <h2>{title}</h2>\r\n    {children}\r\n  </section>\r\n);\r\n\r\nSection.propTypes = {\r\n  title: PropTypes.string.isRequired,    \r\n  children: PropTypes.arrayOf(PropTypes.element)\r\n};\r\n\r\nexport default Section;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Notification = ({ message }) => <h2>{message}</h2>;\r\n\r\nNotification.propTypes = {\r\n  message: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Notification;\r\n","import React, { Component } from 'react';\nimport Statistics from './components/Statistics/Statistics';\nimport FeedbackOptions from './components/FeedbackOptions/FeedbackOptions';\nimport Section from './components/Section/Section';\nimport Notification from './components/Notification/Notification';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      good: 0,\n      neutral: 0,\n      bad: 0,\n    };\n    this.feedbackOptions = ['Good', 'Neutral', 'Bad'];\n  }\n\n  addFeedbackPoints = key => {   \n    this.setState(prevState => {\n      return { [key]: prevState[key] + 1 };\n    });\n  };\n\n  countTotalFeedback = () => {\n    const values = Object.values(this.state);\n\n    let total = 0;\n    for (const value of values) {\n      total += value;\n    }\n    return total;\n  };\n\n  PositiveFeedbackPercentage = () => {\n    const values = Object.values(this.state);\n    let total = 0;\n    for (const value of values) {\n      total += value;\n    }\n    const goodpercent = (this.state.good * 100) / total;\n    return Math.floor(goodpercent);\n  };\n\n  render() {\n    return (\n      <Section title={'Please leave feedback'}>\n        <FeedbackOptions\n          options={this.feedbackOptions}\n          onLeaveFeedback={this.addFeedbackPoints}\n        />\n        {this.countTotalFeedback() === 0 ? (\n          <Notification message=\"No feedback given\" />\n        ) : (\n          <Statistics\n            good={this.state.good}\n            neutral={this.state.neutral}\n            bad={this.state.bad}\n            total={this.countTotalFeedback()}\n            positivePercentage={this.PositiveFeedbackPercentage()}\n          />\n        )}\n      </Section>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__12gri\"};"],"sourceRoot":""}